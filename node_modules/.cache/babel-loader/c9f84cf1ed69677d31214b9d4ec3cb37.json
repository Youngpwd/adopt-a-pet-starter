{"ast":null,"code":"/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('='); // skip things that don't look like key=value\n\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim(); // quoted values\n\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    } // only assign once\n\n\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n\n      case 'none':\n        str += '; SameSite=None';\n        break;\n\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n/**\r\n * Sets a given cookie on the mocked response.\r\n * @example res(ctx.cookie('name', 'value'))\r\n */\n\n\nconst cookie = (name, value, options) => {\n  return res => {\n    const serializedCookie = serialize_1(name, value, options);\n    res.headers.set('Set-Cookie', serializedCookie);\n\n    if (typeof document !== 'undefined') {\n      document.cookie = serializedCookie;\n    }\n\n    return res;\n  };\n};\n/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\n\n\nconst body = value => {\n  return res => {\n    res.body = value;\n    return res;\n  };\n};\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\n\n\nconst text = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/plain');\n    res.body = body;\n    return res;\n  };\n};\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\n\n\nconst xml = body => {\n  return res => {\n    res.headers.set('Content-Type', 'text/xml');\n    res.body = body;\n    return res;\n  };\n};\n\nexport { body as b, cookie as c, parse_1 as p, text as t, xml as x };","map":{"version":3,"sources":["C:/Code/Projects/codecademy/react_apps/adopt-a-pet-starter/node_modules/msw/lib/esm/xml-deps.js"],"names":["parse_1","parse","serialize_1","serialize","decode","decodeURIComponent","encode","encodeURIComponent","pairSplitRegExp","fieldContentRegExp","str","options","TypeError","obj","opt","pairs","split","dec","i","length","pair","eq_idx","indexOf","key","substr","trim","val","slice","undefined","tryDecode","name","enc","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toUTCString","httpOnly","secure","sameSite","toLowerCase","e","cookie","res","serializedCookie","headers","set","document","body","text","xml","b","c","p","t","x"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,KAAd;AACA,IAAIC,WAAW,GAAGC,SAAlB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGC,kBAAb;AACA,IAAIC,MAAM,GAAGC,kBAAb;AACA,IAAIC,eAAe,GAAG,KAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,kBAAkB,GAAG,uCAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASR,KAAT,CAAeS,GAAf,EAAoBC,OAApB,EAA6B;AAC3B,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAGH,OAAO,IAAI,EAArB;AACA,MAAII,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAUR,eAAV,CAAZ;AACA,MAAIS,GAAG,GAAGH,GAAG,CAACV,MAAJ,IAAcA,MAAxB;;AAEA,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,IAAI,GAAGL,KAAK,CAACG,CAAD,CAAhB;AACA,QAAIG,MAAM,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,CAAb,CAFqC,CAIrC;;AACA,QAAID,MAAM,GAAG,CAAb,EAAgB;AACd;AACD;;AAED,QAAIE,GAAG,GAAGH,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAeH,MAAf,EAAuBI,IAAvB,EAAV;AACA,QAAIC,GAAG,GAAGN,IAAI,CAACI,MAAL,CAAY,EAAEH,MAAd,EAAsBD,IAAI,CAACD,MAA3B,EAAmCM,IAAnC,EAAV,CAVqC,CAYrC;;AACA,QAAI,OAAOC,GAAG,CAAC,CAAD,CAAd,EAAmB;AACjBA,MAAAA,GAAG,GAAGA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACD,KAfoC,CAiBrC;;;AACA,QAAIC,SAAS,IAAIf,GAAG,CAACU,GAAD,CAApB,EAA2B;AACzBV,MAAAA,GAAG,CAACU,GAAD,CAAH,GAAWM,SAAS,CAACH,GAAD,EAAMT,GAAN,CAApB;AACD;AACF;;AAED,SAAOJ,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASV,SAAT,CAAmB2B,IAAnB,EAAyBJ,GAAzB,EAA8Bf,OAA9B,EAAuC;AACrC,MAAIG,GAAG,GAAGH,OAAO,IAAI,EAArB;AACA,MAAIoB,GAAG,GAAGjB,GAAG,CAACR,MAAJ,IAAcA,MAAxB;;AAEA,MAAI,OAAOyB,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAM,IAAInB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAI,CAACH,kBAAkB,CAACuB,IAAnB,CAAwBF,IAAxB,CAAL,EAAoC;AAClC,UAAM,IAAIlB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAIqB,KAAK,GAAGF,GAAG,CAACL,GAAD,CAAf;;AAEA,MAAIO,KAAK,IAAI,CAACxB,kBAAkB,CAACuB,IAAnB,CAAwBC,KAAxB,CAAd,EAA8C;AAC5C,UAAM,IAAIrB,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,MAAIF,GAAG,GAAGoB,IAAI,GAAG,GAAP,GAAaG,KAAvB;;AAEA,MAAI,QAAQnB,GAAG,CAACoB,MAAhB,EAAwB;AACtB,QAAIA,MAAM,GAAGpB,GAAG,CAACoB,MAAJ,GAAa,CAA1B;;AAEA,QAAIC,KAAK,CAACD,MAAD,CAAL,IAAiB,CAACE,QAAQ,CAACF,MAAD,CAA9B,EAAwC;AACtC,YAAM,IAAItB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,eAAe2B,IAAI,CAACC,KAAL,CAAWJ,MAAX,CAAtB;AACD;;AAED,MAAIpB,GAAG,CAACyB,MAAR,EAAgB;AACd,QAAI,CAAC9B,kBAAkB,CAACuB,IAAnB,CAAwBlB,GAAG,CAACyB,MAA5B,CAAL,EAA0C;AACxC,YAAM,IAAI3B,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,cAAcI,GAAG,CAACyB,MAAzB;AACD;;AAED,MAAIzB,GAAG,CAAC0B,IAAR,EAAc;AACZ,QAAI,CAAC/B,kBAAkB,CAACuB,IAAnB,CAAwBlB,GAAG,CAAC0B,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAI5B,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,YAAYI,GAAG,CAAC0B,IAAvB;AACD;;AAED,MAAI1B,GAAG,CAAC2B,OAAR,EAAiB;AACf,QAAI,OAAO3B,GAAG,CAAC2B,OAAJ,CAAYC,WAAnB,KAAmC,UAAvC,EAAmD;AACjD,YAAM,IAAI9B,SAAJ,CAAc,2BAAd,CAAN;AACD;;AAEDF,IAAAA,GAAG,IAAI,eAAeI,GAAG,CAAC2B,OAAJ,CAAYC,WAAZ,EAAtB;AACD;;AAED,MAAI5B,GAAG,CAAC6B,QAAR,EAAkB;AAChBjC,IAAAA,GAAG,IAAI,YAAP;AACD;;AAED,MAAII,GAAG,CAAC8B,MAAR,EAAgB;AACdlC,IAAAA,GAAG,IAAI,UAAP;AACD;;AAED,MAAII,GAAG,CAAC+B,QAAR,EAAkB;AAChB,QAAIA,QAAQ,GAAG,OAAO/B,GAAG,CAAC+B,QAAX,KAAwB,QAAxB,GACX/B,GAAG,CAAC+B,QAAJ,CAAaC,WAAb,EADW,GACkBhC,GAAG,CAAC+B,QADrC;;AAGA,YAAQA,QAAR;AACE,WAAK,IAAL;AACEnC,QAAAA,GAAG,IAAI,mBAAP;AACA;;AACF,WAAK,KAAL;AACEA,QAAAA,GAAG,IAAI,gBAAP;AACA;;AACF,WAAK,QAAL;AACEA,QAAAA,GAAG,IAAI,mBAAP;AACA;;AACF,WAAK,MAAL;AACEA,QAAAA,GAAG,IAAI,iBAAP;AACA;;AACF;AACE,cAAM,IAAIE,SAAJ,CAAc,4BAAd,CAAN;AAdJ;AAgBD;;AAED,SAAOF,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASmB,SAAT,CAAmBnB,GAAnB,EAAwBN,MAAxB,EAAgC;AAC9B,MAAI;AACF,WAAOA,MAAM,CAACM,GAAD,CAAb;AACD,GAFD,CAEE,OAAOqC,CAAP,EAAU;AACV,WAAOrC,GAAP;AACD;AACF;AAED;AACA;AACA;AACA;;;AACA,MAAMsC,MAAM,GAAG,CAAClB,IAAD,EAAOG,KAAP,EAActB,OAAd,KAA0B;AACrC,SAAQsC,GAAD,IAAS;AACZ,UAAMC,gBAAgB,GAAGhD,WAAW,CAAC4B,IAAD,EAAOG,KAAP,EAActB,OAAd,CAApC;AACAsC,IAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,YAAhB,EAA8BF,gBAA9B;;AACA,QAAI,OAAOG,QAAP,KAAoB,WAAxB,EAAqC;AACjCA,MAAAA,QAAQ,CAACL,MAAT,GAAkBE,gBAAlB;AACH;;AACD,WAAOD,GAAP;AACH,GAPD;AAQH,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,IAAI,GAAIrB,KAAD,IAAW;AACpB,SAAQgB,GAAD,IAAS;AACZA,IAAAA,GAAG,CAACK,IAAJ,GAAWrB,KAAX;AACA,WAAOgB,GAAP;AACH,GAHD;AAIH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,IAAI,GAAID,IAAD,IAAU;AACnB,SAAQL,GAAD,IAAS;AACZA,IAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,EAAgC,YAAhC;AACAH,IAAAA,GAAG,CAACK,IAAJ,GAAWA,IAAX;AACA,WAAOL,GAAP;AACH,GAJD;AAKH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,GAAG,GAAIF,IAAD,IAAU;AAClB,SAAQL,GAAD,IAAS;AACZA,IAAAA,GAAG,CAACE,OAAJ,CAAYC,GAAZ,CAAgB,cAAhB,EAAgC,UAAhC;AACAH,IAAAA,GAAG,CAACK,IAAJ,GAAWA,IAAX;AACA,WAAOL,GAAP;AACH,GAJD;AAKH,CAND;;AAQA,SAASK,IAAI,IAAIG,CAAjB,EAAoBT,MAAM,IAAIU,CAA9B,EAAiC1D,OAAO,IAAI2D,CAA5C,EAA+CJ,IAAI,IAAIK,CAAvD,EAA0DJ,GAAG,IAAIK,CAAjE","sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n * @public\n */\n\nvar parse_1 = parse;\nvar serialize_1 = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n/**\r\n * Sets a given cookie on the mocked response.\r\n * @example res(ctx.cookie('name', 'value'))\r\n */\r\nconst cookie = (name, value, options) => {\r\n    return (res) => {\r\n        const serializedCookie = serialize_1(name, value, options);\r\n        res.headers.set('Set-Cookie', serializedCookie);\r\n        if (typeof document !== 'undefined') {\r\n            document.cookie = serializedCookie;\r\n        }\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets a raw response body. Does not append any `Content-Type` headers.\r\n * @example\r\n * res(ctx.body('Successful response'))\r\n * res(ctx.body(JSON.stringify({ key: 'value' })))\r\n * @see {@link https://mswjs.io/docs/api/context/body `ctx.body()`}\r\n */\r\nconst body = (value) => {\r\n    return (res) => {\r\n        res.body = value;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets a textual response body. Appends a `Content-Type: text/plain`\r\n * header on the mocked response.\r\n * @example res(ctx.text('Successful response'))\r\n * @see {@link https://mswjs.io/docs/api/context/text `ctx.text()`}\r\n */\r\nconst text = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/plain');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\n/**\r\n * Sets an XML response body. Appends a `Content-Type: text/xml` header\r\n * on the mocked response.\r\n * @example\r\n * res(ctx.xml('<node key=\"value\">Content</node>'))\r\n * @see {@link https://mswjs.io/docs/api/context/xml `ctx.xml()`}\r\n */\r\nconst xml = (body) => {\r\n    return (res) => {\r\n        res.headers.set('Content-Type', 'text/xml');\r\n        res.body = body;\r\n        return res;\r\n    };\r\n};\n\nexport { body as b, cookie as c, parse_1 as p, text as t, xml as x };\n"]},"metadata":{},"sourceType":"module"}